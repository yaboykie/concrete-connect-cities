
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables for Supabase connection
// Add fallback values for development in case the environment variables are not set
const SUPABASE_URL = import.meta.env.VITE_PUBLIC_SUPABASE_URL || "https://aiyzpzibgrgqslsoulgj.supabase.co";
const SUPABASE_KEY = import.meta.env.VITE_PUBLIC_SUPABASE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFpeXpwemliZ3JncXNsc291bGdqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM0MjMyMTYsImV4cCI6MjA1ODk5OTIxNn0.haluELacZINIK1dJ7sVwBraK0jcQAlMjrjvlp58RJRQ";

// Debug log to verify environment variables are available
console.log("Supabase URL available:", !!SUPABASE_URL);
console.log("Supabase Key available:", !!SUPABASE_KEY && SUPABASE_KEY.length > 0);

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error("⚠️ Supabase environment variables missing or empty.");
  console.error("VITE_PUBLIC_SUPABASE_URL:", SUPABASE_URL ? "Set" : "Missing");
  console.error("VITE_PUBLIC_SUPABASE_KEY:", SUPABASE_KEY ? "Set" : "Missing");
  
  throw new Error(
    '❌ Supabase environment variables are missing. Make sure VITE_PUBLIC_SUPABASE_URL and VITE_PUBLIC_SUPABASE_KEY are defined in Lovable.dev > Settings > Secrets.'
  );
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_KEY);

// Helper function to log errors from Supabase operations
export const handleSupabaseError = (error: any, operation: string) => {
  if (error) {
    console.error(`Error during ${operation}:`, error.message);
    return error.message;
  }
  return null;
};

// Keep track of successful and failed queries to monitor health
let queryStats = {
  successful: 0,
  failed: 0,
  lastError: null as string | null,
  lastSuccessTime: null as number | null
};

// Reset query stats
export const resetQueryStats = () => {
  queryStats = {
    successful: 0,
    failed: 0,
    lastError: null,
    lastSuccessTime: null
  };
};

// Get Supabase query statistics
export const getQueryStats = () => {
  return {
    ...queryStats,
    success_rate: queryStats.successful + queryStats.failed > 0 
      ? (queryStats.successful / (queryStats.successful + queryStats.failed) * 100).toFixed(2) + '%' 
      : 'N/A'
  };
};

// Wrapper for Supabase queries to track performance and errors
export const trackedQuery = async <T>(
  queryFn: () => Promise<T>,
  operation: string
): Promise<T> => {
  try {
    const result = await queryFn();
    queryStats.successful += 1;
    queryStats.lastSuccessTime = Date.now();
    return result;
  } catch (error) {
    queryStats.failed += 1;
    queryStats.lastError = error instanceof Error ? error.message : String(error);
    console.error(`Error during ${operation}:`, error);
    throw error;
  }
};
